<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Алексей Жидков</title><link>https://azhidkov.pro/</link><description>Recent content on Алексей Жидков</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Sat, 15 Apr 2023 01:25:37 +0700</lastBuildDate><atom:link href="https://azhidkov.pro/index.xml" rel="self" type="application/rss+xml"/><item><title>Рациональный подход к декомпозиции систем на модули или микросервисы</title><link>https://azhidkov.pro/posts/23/04/ergonomic-decomposition/</link><pubDate>Sat, 15 Apr 2023 01:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/23/04/ergonomic-decomposition/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Note: Данный пост является базовым материалом для моего доклада на JPoint 2023
Чего от разработки ПО хотят разработчики, продакты и владельцы бизнеса?Одного и того же - побольше дофаминчика (гормон счастья), поменьше кортизольчика (гормон стресса). Притом источники и дофамина, и кортизола у них одни и те же. Дофамин вырабатывается, когда фичи выпускаются в срок и без багов, а кортизол - когда сроки срываются и вылазят баги и регрессии.</description></item><item><title>Дальнейшие планы работы над Эргономичным подходом</title><link>https://azhidkov.pro/microposts/23/04/plans/</link><pubDate>Thu, 09 Mar 2023 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/microposts/23/04/plans/</guid><description>Note: Этот материал является &amp;#34;микропостом&amp;#34; - текстом, написанным в режиме потока сознания без особой редактуры.
Следить за обновлениями блога можно в моём канале: Эргономичный код
Привет!
Разобрался с делами, накопившимися после конфы, перевёл немного дух и пишу обещанный пост с моими дальнейшими планами. Ну как планами - я не человек плана, поэтому это те области, которые на данный момент я бы хотел затронуть в рамках Эргономичного подхода. Без сроков и даже порядка.</description></item><item><title>Опыт внедрения инструментов статического анализа кода в Проект Э</title><link>https://azhidkov.pro/microposts/23/03/project-e-static-analysis/</link><pubDate>Thu, 09 Mar 2023 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/microposts/23/03/project-e-static-analysis/</guid><description>Note: Этот материал является &amp;#34;микропостом&amp;#34; - текстом, написанным в режиме потока сознания без особой редактуры.
Следить за обновлениями блога можно в моём канале: Эргономичный код
Привет!
Я внедрил в Проект Э три тула статического анализа кода - Detekt, Kover и ArchUnit - и хочу поделиться, что из этого вышло.
DetektДетект появился с подачи РП, если не вдаваться в детали. В какой-то момент у нас был ботлнек на моём ревью, и РП хотел так его решить.</description></item><item><title>Рациональный подход к декомпозиции систем на модули или микросервисы</title><link>https://azhidkov.pro/drafts/effects-diagram/ood-decomposition-v4/</link><pubDate>Sat, 04 Mar 2023 01:25:37 +0700</pubDate><guid>https://azhidkov.pro/drafts/effects-diagram/ood-decomposition-v4/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Чего от разработки ПО хотят разработчики, продакты и владельцы бизнеса?Одного и того же - побольше дофаминчика (гормон счастья), поменьше кортизольчика (гормон стресса). При том источники и дофамина, и кортизола у них одни и те же. Дофамин вырабатывается, когда фичи выпускаются в срок и без багов, а кортизол - когда сроки срываются и вылазят баги и регрессии. Бизнесу будет ближе финансовая версия - срыв сроков и баги очевидным образом приводят к увлечению стоимости разработки.</description></item><item><title>Диаграмма эффектов: объектно-ориентированная декомпозиция</title><link>https://azhidkov.pro/drafts/effects-diagram/ood-decomposition-v2/</link><pubDate>Wed, 04 Jan 2023 01:25:37 +0700</pubDate><guid>https://azhidkov.pro/drafts/effects-diagram/ood-decomposition-v2/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
ВведениеГода три назад у меня был &amp;#34;разговор у кулера&amp;#34; с коллегой, в котором я критиковал декомпозицию по слоям. В ответ на это коллега сказал - &amp;#34;Ну это всё понятно. Но по другому-то как?&amp;#34;. На тот момент мне было нечего сказать, кроме общих слов вроде: &amp;#34;эээ…​ нууу…​ это же и есть работа архитектора, надо смотреть на каждый конкретный случай&amp;#34;.</description></item><item><title>Обзор доклада "Меняем Spring Data JPA на Spring Data JDBC!"</title><link>https://azhidkov.pro/microposts/23/01/jpa-to-jdbc-migration/</link><pubDate>Tue, 03 Jan 2023 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/microposts/23/01/jpa-to-jdbc-migration/</guid><description>Note: Этот материал является &amp;#34;микропостом&amp;#34; - текстом, написанным в режиме потока сознания без особой редактуры.
Следить за обновлениями блога можно в моём канале: Эргономичный код
Привет!
Посмотрел Меняем Spring Data JPA на Spring Data JDBC! и хотя докладчик в начале сказал, что не призывает использовать JPA, мне что-то захотелось написать микропост в защиту Spring Data JDBC (далее - просто JDBC).
Я сначала кратко напишу своё отношение к JDBC и почему я всё ещё его использую, а потом пройдусь по тезисам из доклада, которые хочу оспорить/прокомментировать.</description></item><item><title>Спецификация диаграммы эффектов v0.1.0</title><link>https://azhidkov.pro/effects-diagram/specification-html/</link><pubDate>Fri, 23 Dec 2022 01:25:37 +0700</pubDate><guid>https://azhidkov.pro/effects-diagram/specification-html/</guid><description>История измененийv0.2.0Изменение нотации: обращено направление стрелок, обозначающих эффекты чтения - теперь они идут от операций к ресурсам. v0.1.0Изменение концептуальной модели: эффекты косвенного вызова заменены на события.Улучшена стилистика и точность формулировок.Удалено &amp;#34;Приложение 3. Философия эффекта&amp;#34;. v0.0.2Изменение условного обозначения событий: отказ от представления отдельными блоками в пользу стрелок.Переход к использованию визуального языка C4 Model. v0.0.1Опубликована первая версия.
ВведениеДиаграмма эффектов — инструмент для разработчиков, предназначенный для визуализации поведения информационной системы через описание её взаимодействия с внешним миром.</description></item><item><title>Функциональные программы проще понимать</title><link>https://azhidkov.pro/microposts/22/12/why-fp-simpler/</link><pubDate>Thu, 22 Dec 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/microposts/22/12/why-fp-simpler/</guid><description>Note: Этот материал является &amp;#34;микропостом&amp;#34; - текстом, написанным в режиме потока сознания без особой редактуры.
Следить за обновлениями блога можно в моём канале: Эргономичный код
Последние несколько дней перечитывают блог (кто бы мог подумать, чтоб блоги тоже можно перечитывать) Тэда Каминского. Во-первых, в очередной раз настоятельно рекомендую его почитать - там очень много очень мудрых мыслей, мужик прям понимает суть программирования.
Во-вторых, там снова откопал пост, который объясняет почему ФП проще.</description></item><item><title>Эргономичный подход</title><link>https://azhidkov.pro/ergo-approach/landing/</link><pubDate>Sat, 10 Dec 2022 01:25:37 +0700</pubDate><guid>https://azhidkov.pro/ergo-approach/landing/</guid><description>Эргономичный подход (ЭП) - это простая методика разработки бакендов, которая помогает команде систематически обеспечивать высокое качество и скорость решения задач на протяжении всего срока жизни проекта.
Методика включает в себя:
Процесс разработки;Артефакты каждого этапа процесса;Критерии контроля качества каждого артефакта;Обучающие материалы по выполнению этапов, позволяющие создавать артефакты соответствующего качества. Характерными чертами проектов, разработанных в соответствии с Эргономичным подходом, являются:
Декомпозиция на базе эффектов*;Функциональная архитектура;Эргономичная структура;Классическая школа автоматизации тестирования;Фокус на автоматизации функционального тестирования.</description></item><item><title>Эргономичный подход на JPoint</title><link>https://azhidkov.pro/microposts/22/11/ea-at-jpoint/</link><pubDate>Fri, 18 Nov 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/microposts/22/11/ea-at-jpoint/</guid><description>Привет!
У меня ребёнок начал стабильно ходить в детский сад! Пока писал пост - снова заболел🤦‍♂️.
Как это касается вас? Во-первых, если у вас сейчас первый ребёнок до трёх лет - верьте, свет в конце туннеля есть, вместе с садом у вас начнётся новая жизнь:)
Например, у вас снова появится время смотреть видосики в интернете:) И я вот посмотрел доклад c JPoint &amp;#34;Эргономичный подход TDD&amp;amp;DDD — гайд по разработке бизнес-логики&amp;#34;. Репозиторий доклада.</description></item><item><title>Заметки по докладам со Spring IO 2022</title><link>https://azhidkov.pro/microposts/22/10/spring-one-22/</link><pubDate>Thu, 03 Nov 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/microposts/22/10/spring-one-22/</guid><description>На той неделе я был в полуотпуске и посмотрел 3 миллиона видео со Spring IO 2022 и SpringOne 2021. На удивление, из докладов SpringOne (вроде как главной конфы по Spring) - меня вообще ничего не заинтересовало. Большую часть я даже открывать не стал, а то что посмотрел - зря время потратил, хоть и на x1.5 и многое просто перематывая.
А вот на Spring IO было много прям крутых докладов и я собрал микропост (пост, написанный за один проход без редактуры) из своих заметок по этим видео.</description></item><item><title>Планирование реинженеринга Проекта Э</title><link>https://azhidkov.pro/microposts/22/10/project-e-planning/</link><pubDate>Mon, 24 Oct 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/microposts/22/10/project-e-planning/</guid><description>В этом микропосте (посте, написанном за один проход без редактуры) я решил рассказать, как я спланировал работы по реинженерингу Проекта Э.
Начал я с того, что с помощью одного из джунов построил граф эндпоинтов (как REST, так и RabbitMQ) микросервисов и зависимостей между ними. Каждому эндпоинту я на глаз присвоил &amp;#34;размер&amp;#34; - xs, s, m, l, xl. Для того, чтобы граф был более нагляден, я цветом закодировал тип эндпоинта (зелёных - REST, синий - RabbitMQ RPC, красный - RabbitMQ Event), а насыщенностью - его размер.</description></item><item><title>Что почитать разработчику?</title><link>https://azhidkov.pro/posts/22/09/ergo-reading-list/</link><pubDate>Thu, 25 Aug 2022 12:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/22/09/ergo-reading-list/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Этот пост содержит подборки книг, которые на мой взгляд стоит прочитать профессиональному разработчику. Большинство книг я рекомендую читать на английском, так как русские переводы зачастую фатально искажают смысл.
Одна лучшая книга в области программирования за всю историю по версии меняЕстественно, лучшая книга по программированию - книга об Эргономичном подходе:) К сожалению, она ещё не написана.
Но у меня уже есть ряд постов (~80-100 страниц), которые можно почитать:</description></item><item><title>Подходы к декомпозиции бэкендов информационных систем</title><link>https://azhidkov.pro/posts/22/08/ergonomic-decomposition/</link><pubDate>Tue, 09 Aug 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/22/08/ergonomic-decomposition/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
a class is a necessary but insufficient vehicle for decomposition
Класс - это необходимое, но недостаточное средство декомпозиции
— Grady Booch, Object-Oriented Analysis and Design with Applications Количество классов в реализации даже небольшой программы на один человеко-месяц исчисляется десятками. В средних программах на несколько человеко-лет счёт идёт уже на тысячи. А человек может одновременно оперировать 7-ю +/- 2 объектами.</description></item><item><title>Потока-сознания-пост: и снова о декомпозиции</title><link>https://azhidkov.pro/microposts/22/08/decomposition-history/</link><pubDate>Tue, 09 Aug 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/microposts/22/08/decomposition-history/</guid><description>Note: Этот материал является &amp;#34;микропостом&amp;#34; - текстом, написанным в режиме потока сознания без редактуры.
Следить за обновлениями блога можно в моём канале: Эргономичный код
ПредисторияДавным-давно, я знал только один подход к декомпозиции систем на базе &amp;#34;здравого смысла&amp;#34; и кластерного анализа. Декомпозиция по слоям - не в счёт, это не подход к декомпозиции, а избегание этой самой декомпозиции. Этим подходом, на самом деле, я пользуюсь до сих пор в случаях, когда надо максимально быстро выкатить первый &amp;#34;ходячий скелет&amp;#34; проекта.</description></item><item><title>Диаграмма эффектов</title><link>https://azhidkov.pro/effects-diagram/landing/</link><pubDate>Fri, 22 Jul 2022 01:25:37 +0700</pubDate><guid>https://azhidkov.pro/effects-diagram/landing/</guid><description>Диаграмма эффектов - это инструмент разработчика, созданный для визуализации поведения информационной системы через её эффекты. Эффекты - это взаимодействие системы с внешним миром (например, запись и чтение диска, обращение к БД, обращение к внешним сервисам и т.п.).
Такое представление полезно на всех этапах разработки ПО - от первичного анализа до планирования работ и поддержки:
На этапе первичного анализа применение диаграммы эффектов снижает затраты благодаря тому, что позволяет проектировщику быстрее построить целостную картину реализации будущей системы.</description></item><item><title>Абстрактные войны: public interface IAbstraction против абстракции</title><link>https://azhidkov.pro/posts/22/07/abstraction-wars/</link><pubDate>Wed, 06 Jul 2022 05:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/22/07/abstraction-wars/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
ВведениеПочти 30 лет назад в классической книге по шаблонам проектирования Design Patterns: Elements of Reusable Object-Oriented Software, авторы сформулировали один из самых известных, но недопонятых принципов в истории программирования:
Program to an interface, not an implementation.
— Erich Gamma et. al, Design Patterns: Elements of Reusable Object-Oriented Software Зачем &amp;#34;программировать в интерфейсы&amp;#34;? Для того чтобы реализацию этого интерфейса можно было менять без изменений клиентского кода.</description></item><item><title>Диаграмма эффектов: пример построения</title><link>https://azhidkov.pro/posts/22/06/220611-true-story-project/</link><pubDate>Sat, 11 Jun 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/22/06/220611-true-story-project/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Это второй пост в серии, посвящённый диаграмме эффектов:
&amp;#34;Спецификация&amp;#34; - назначение диаграммы, основные концептуальные элементы и их визуальное представление&amp;#34;Пример построения, проект True Story Project (TSP)&amp;#34; - процесс построения диаграммы эффектов реального проекта&amp;#34;Декомпозиция системы на модули на базе диаграммы эффектов&amp;#34; - рациональный подход к разбиению системы на модули с помощью диаграммы эффектов и его применение для декомпозиции проекта TSP&amp;#34;Перевод диаграммы в код&amp;#34; - процесс трансляции диаграммы в исходный код на примере проекта TSP ВведениеВедущие разработчики (ака техлиды, тимлиды, архитекторы) встречаются с целым рядом нетривиальных вопросов:</description></item><item><title>Диаграмма Эффектов: Спецификация v0.0.2</title><link>https://azhidkov.pro/posts/22/05/220519-effects-diagram-intro/</link><pubDate>Thu, 19 May 2022 01:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/22/05/220519-effects-diagram-intro/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Note: Этот пост является первой попыткой описать диаграмму формально, поэтому в описании возможны неточности и пробелы, а детали и нотация наверняка изменятся в будущем.
Это первый пост в серии, посвящённый диаграмме эффектов:
&amp;#34;Спецификация&amp;#34;: назначение диаграммы, основные концептуальные элементы и их визуальное представление&amp;#34;Пример построения диаграммы, проект True Story Project (TSP)&amp;#34; - процесс построения диаграммы эффектов реального проекта&amp;#34;Методика объектно-ориентированной декомпозиции&amp;#34; - рациональный подход к разбиению системы на модули с помощью диаграммы эффектов и его применение для декомпозиции проекта TSP&amp;#34;Методика перевода диаграммы в код&amp;#34; - процесс трансляции диаграммы в исходный код на примере проекта TSP ВведениеИдентичность информационной системы определяется тем, как она взаимодействует с внешним миром.</description></item><item><title>Эргономичный подход v1.0M1</title><link>https://azhidkov.pro/posts/22/04/220409-ergo-approach-v10m1/</link><pubDate>Sat, 09 Apr 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/22/04/220409-ergo-approach-v10m1/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
ПредисловиеЯ рад сообщить о завершении этапа прототипирования и проверки гипотезы Эргономичного подхода и переходе к стабилизации и продуктизации.
Работу над Эргономичным подходом я начал весной 2020 года. Причиной тому стал возврат к работе над стандартными для экосистемы Spring-а проектами после четырёхлетнего перерыва.
На контрасте с работой над своими проектами, я особенно остро ощутил уже забытые чувства раздражения от избыточной трудоёмкости решения задач и страха внести регрессию.</description></item><item><title>Агрегаты</title><link>https://azhidkov.pro/posts/22/04/220401-aggregates/</link><pubDate>Fri, 01 Apr 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/22/04/220401-aggregates/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
ВведениеNote: В процессе написания этого поста, стало очевидно, что ему нужны подводки в виде того, чем агрегаты лучше связного графа сущностей и что такое диаграмма эффектов. Но так как я этот пост мурыжу уже два месяца, я решил последовать примеру Джорджа Лукаса и начать с конца:)
В предыдущем посте (Черновик поста) я рассмотрел подходы к проектированию модели информации системы и пришёл к выводу, что наилучшим подходом является подход на базе агрегатов.</description></item><item><title>Диаграмма Эффектов v0.0.1</title><link>https://azhidkov.pro/drafts/aggregates/effects-diagram-v2/</link><pubDate>Fri, 01 Apr 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/drafts/aggregates/effects-diagram-v2/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Note: Этот пост является первой попыткой описать диаграмму формально, поэтому в описании возможны неточности и пробелы, а детали и нотация наверняка изменятся в будущем.
ВведениеЭффекты, на ряду с моделью информации, являются душой информационной системы - что-то сохранить в БД, что-то запросить из внешнего сервиса, что-то запросить из нескольких источников, объединить это и записать куда-то, в общем как-то по взаимодействовать с окружающим миром.</description></item><item><title>Черновик: Диаграмма Эффектов v0.0.1</title><link>https://azhidkov.pro/drafts/aggregates/effects-diagram/</link><pubDate>Fri, 01 Apr 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/drafts/aggregates/effects-diagram/</guid><description>ВведениеСейчас самым распространённым способом декомпозиции ПО является декомпозиция по техническим аспектам - сервисы, сущности, исключения и т.п. И хотя многие известные и авторитетные авторы - такие как Константин, Парнас, Эванс и Мартин - критикуют такой способ декомпозиции, никто из них не даёт альтернативной практической методики.
Я потратил несколько лет на поиски готового способа декомпозиции, отличного от декомпозиции по техническим аспектам. Однако ничего не нашёл и потратил ещё два года на разработку собственного.</description></item><item><title>Черновик: Основные подходы к моделированию информации - объектная и реляционные модели информации</title><link>https://azhidkov.pro/drafts/aggregates/information-modeling/</link><pubDate>Fri, 01 Apr 2022 08:25:37 +0700</pubDate><guid>https://azhidkov.pro/drafts/aggregates/information-modeling/</guid><description>Моделирование информацииВведение Сущности, связи, атрибуты, состояние, данные, объекты, объекты-значения, идентичность и все-все-всеУниверсальные понятияИдентичность хреновиныНа базе ИДа (места) На базе атрибутов Состояние Сущность Значение Изменяемость/неизменяемость Абстрактная модельСущность Атрибут ??? значение/тип/домен Связь Модель информации на базе записей ER-модель Реляционная модель ХХХ-модель на базе структур (данных)Поля (атрибуты) УУУ-модель на базе указателей/объектовОбъект-значение (это симуляция данных в языках, в которых есть только объекты) Свойства (поля/атрибуты)Сущности концептуально изменяемы. Но представлять их лучше как последовательность неизменяемых данных</description></item><item><title>Структура эргономичных программ</title><link>https://azhidkov.pro/posts/21/10/211018-ergo-approach-post/</link><pubDate>Mon, 29 Nov 2021 12:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/10/211018-ergo-approach-post/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
В этом посте мы рассмотрим основные структуры кодовой базы, свойственные лёгким в поддержке информационным системам (ИС). Я буду постепенно приближаться от максимально абстрактного взгляда на ИС до структуры реализации отдельных функций ИС.
Абстракция информационной системыNote: Здесь я рассматриваю только разработку бэкендов информационных систем на базе Spring Framework, но этот материал применим к разработке информационных систем на базе других технологий.</description></item><item><title>Что я делаю не так</title><link>https://azhidkov.pro/posts/21/11/211107-what-is-the-difference/</link><pubDate>Sat, 06 Nov 2021 12:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/11/211107-what-is-the-difference/</guid><description>&amp;#34;Алексей - один из лучших разработчиков, с которыми я работал. Работой с ним я удовлетворён на 10 баллов из 10, потому что он практически всегда попадает в озвученные сроки, и в работе с ним не приходится накидывать 50% на всякий пожарный&amp;#34;.
— Денис Исаев, руководитель проектов Привет! Алексей - это я. В этом посте я расскажу, что я делаю не так, как принято, чтобы получать такие отзывы.
Свой подход к разработке я называю Эргономичным и от общепринятого он отличается следующим:</description></item><item><title>Архитектура ориентированная на трансформацию</title><link>https://azhidkov.pro/posts/21/09/210925-maintanable-arch/</link><pubDate>Sat, 25 Sep 2021 11:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/09/210925-maintanable-arch/</guid><description>Note: Это пост в формате &amp;#34;мысли в слух&amp;#34; - без редактуры и проверки фактов, написанный для того чтобы перестать мусолить его в голове и наконец уснуть.
Последние несколько лет я активно топил за чистую архитектуру анкл Боба и даже сделал два с половиной проекта в соответсвии с ней:
И эти проекты показали, что следование чистой архтиектуре генеряет кучу геммороя.
Транзакции в слое интеракторов нельзя обозначать обычной @Transactional - приходится писать кастомный Transactor.</description></item><item><title>Многоликий принцип единственности ответственности</title><link>https://azhidkov.pro/posts/21/06/210626-srp-interpretations/</link><pubDate>Mon, 21 Jun 2021 11:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/06/210626-srp-interpretations/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Кажется, любой &amp;#34;солидный&amp;#34; программист знает что такое SOLID вообще и принцип единственности ответственности (SRP) в частности.
Спойлер, если вдруг не знаетеSOLID - это название принципов объектно-ориентированного дизайна, сформулированных Робертом Мартином, так же известным как анкл Боб. Принципы звучат следующим образом:
Single Responsibility Principle: A module should have one, and only one, reason to change.Open/Closed Principle:: A software artifact should be open for extension but closed for modification.</description></item><item><title>Анкл Боб не всегда прав</title><link>https://azhidkov.pro/posts/21/04/srp-ocp-conflict/</link><pubDate>Wed, 28 Apr 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/04/srp-ocp-conflict/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Свежий пост Анкл БобаПрочитал свежий пост Анкл Боба и я с ним категорически не согласен.
Краткое содержание поста:
Где-то в интернете спросили как зарефакторить код:
Анкл Боб сказал, что правильно инкапсулировать этот иф в фабрику:
И далее он пишет:
Every business rule that would once have depended on an if/else/switch statement now has its own particular method to call in the base class</description></item><item><title>Почему следует избегать использования JPA/Hibernate в продакшене</title><link>https://azhidkov.pro/posts/21/04/why-jpa-should-be-avoided/</link><pubDate>Sat, 03 Apr 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/04/why-jpa-should-be-avoided/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Обновление от 19.11.21:
Добавил ссылок на книги в Весь код становится кодом с побочными эффектами Обновление от 22.08.21:
Раздел Плохой процедурный стиль программированияРаздел Что делать, если JPA невозможно избежатьРаздел Ссылки Дисклеймер - я люто ненавижу JPA/HibernateМои отношения с Hibernate (JPA тогда ещё не было) не сложились с самого начала - в далёком то ли 2005, то ли 2007, на собеседовании у меня спросили как замапить отношение 1-N в Hibernate.</description></item><item><title>О декомпозиции систем</title><link>https://azhidkov.pro/posts/21/03/250326-project-decomposiotion/</link><pubDate>Wed, 24 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/03/250326-project-decomposiotion/</guid><description>Дисклаймер: это небольшой линко-пост на тему, достойную главы книги
Наконец-то свершилась ваша мечта и вам досталось сделать проект с чистого листа. Наконец-то вы можете сделать всё правильно, а не воевать с легаси написанным сто лет назад людьми, которых вы никогда не видели.
Но как это сделать? Как сделать систему, за которую вас не будут проклинать ваши последователи?
Половину ответа я уже в каком-то виде описал в книге - это таблица эффектов приложения и компоненты.</description></item><item><title>Обо мне</title><link>https://azhidkov.pro/about/</link><pubDate>Sat, 13 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/about/</guid><description>Специализируюсь на разработке информационных систем (ака серверов, бэков, АПИ) на платформе Java. Но девятнадцать лет опыта и широкий кругозор, позволяют мне успешно реализовывать и Десктопные приложения на Python и низкоуровневые системы захвата видео на C и мобильные приложения на Kotlin Multiplatform Mobile. Успешность проектов я определяю по тому, что из семи заказчиков, пять обращались к моим услугам более одного раза. Из двух оставшихся один прекратил деятельность, а второй обращался для проверки бизнес-гипотезы в сфере отличной от его основной области деятельности.</description></item><item><title>Портфолио</title><link>https://azhidkov.pro/portfolio/</link><pubDate>Sat, 13 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/portfolio/</guid><description>Жидков Алексей ПавловичАрхитектор, техлид https://azhidkov.pro https://github.com/d-r-q https://habr.com/ru/users/jdev/
Специализируюсь на разработке информационных систем ([1],[2],[3]) на платформе Java. Но девятнадцать лет опыта, любовь к профессии и свободное чтение на английском позволяют мне успешно делать и десктопные приложения на Python и низкоуровневые системы захвата видео на C и мобильные приложения на Kotlin Multiplatform Mobile.
Занимаюсь коммерческим программированием с 2005 года. С 2017 года работаю независимым консультантом.
Помимо разработки ПО, преподаю и веду дипломников в ВКИ НГУ и НГУ с 2007 года.</description></item><item><title>Тесты, которым можно доверять</title><link>https://azhidkov.pro/posts/21/03/210321-project-l-testing/</link><pubDate>Sat, 13 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/03/210321-project-l-testing/</guid><description>Я сейчас делаю проект с чистого листа, в котором я основой и ведущий бакэндер. И, естественно, я его делаю в соответствии с Эргономичным Подходом.
Главным условием для того, чтобы кодовая база была эргономичной является набор тестов, которым можно доверять. Если тесты прошли - можно релизать. И никак иначе.
В этом посте я расскажу, как я организовал тестирование &amp;#34;Проекта Л&amp;#34;.
Проект ЛПроект под NDA, поэтому в подробностях я его описать не могу, но могу привести ряд ключевых характеристик:</description></item><item><title>Неэргономичный Jackson</title><link>https://azhidkov.pro/posts/21/02/210212-jackson-write-object-as-string/</link><pubDate>Tue, 23 Feb 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/02/210212-jackson-write-object-as-string/</guid><description>В последнее вермя несколько раз писал примерно такой код для сериализации объекта в json Jackson-ом:
public String renderToJson(Object dto) { try { return objectMapper.writeValueAsString(dto); } catch (IOException e) { throw new AssertionError(&amp;#34;Unexpected IOException converting object to json&amp;#34;); } } И мне это глаз резало - я генерирую строку в памяти, какой нафик IO??? Но задуматься времени не было.
А тут за чтением The modern way to perform error handling из глубин подсознания внезапно всплыл ответ:) И знаете что я вам скажу?</description></item><item><title>Разработка эргономичного кода</title><link>https://azhidkov.pro/book/ergo/</link><pubDate>Tue, 23 Feb 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/book/ergo/</guid><description>Table of ContentsТехническая главаРабота не завершенаTo doВведениеМотивацияЧто такое эргономичный код?Это всё из-за эффектов (todo: или таки состояния)Как появляются скрытые связи?Базовые идеиLayered architectureHexagonal (Ports&amp;amp;Adapters) architecture, Clean architecture, Onion architectureData, Context, Interaction ArchitectureDomain Driven DesingSimple Made EasyFunctional core, imperative shell (FCIS)Railway oriented programmingПроектированиеПринципы проектированияПарадигмы программирования (todo: переименовать и унести куда-то)Процедурное программирование (todo: коммент)Объектно-ориентированное программированиеФункциональное программированиеМультипарадигменное программированиеМодель системы? (Stub)Таблица эффектовПринципы проектирования системыМодель Юз КейсаПлатформаПортыАдаптерыЛогикаЮз кейсыДекомпозиция приложенияРазбиение по видам классовДругие идеи к разбиению классовМой подход к разбиению классовКодированиеКонструкторы должно создавать валидные объектыУ класса может быть не более 5 зависимостейНаследование (todo)Открытые иерархииЗакрытые иерархииИзбегайте интерфейсов с единственной реализацией (todo)Иммутабельность по дефолту (todo:)Domain Specific Languages (todo)Типизированные ИДы (todo:)CQRS (todo:)Обработка ошибок (todo:)Find Usages колонок БД (#todo: #)Тестирование (todo)Моки (todo)TDD?</description></item><item><title>Типы функций: функции-мошенники</title><link>https://azhidkov.pro/posts/21/01/210126-fraud-functions/</link><pubDate>Tue, 26 Jan 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/01/210126-fraud-functions/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Начало темы здесь, здесь и здесь.
С второго взгляда терминология оказалась не такой уж чудесной, как показалась на первый взгляд, но я на этом посте засиделся, так что публикую как есть. В посте с итогами ещё раз попробую составить приличную терминологию.
Как я уже писал в прошлой статье, эффекты - это то ради чего пишутся программы, и тот критерий, по которому программы оцениваются.</description></item><item><title>Красная или синяя?</title><link>https://azhidkov.pro/posts/21/01/210122-pp-vs-fp/</link><pubDate>Fri, 22 Jan 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/01/210122-pp-vs-fp/</guid><description>Статья не отредактирована после переезда с телеграфа. Оригинал
Привет! Чёт ~эта неделька опять выдалась сложная~ я прокрастинирую пост о грязных функциях и сайд эффектах, потому что там кой-чего не схоидтся. Поэтому сёня пост в бок с хейтом мейнстримного ``ООП&amp;#39;&amp;#39; - почитывал на досуге код на кложуре, и меня опять малёха бомбануло.
Меня тут осенило. Возьмём вот такой кусочек кода на кложуре (чисто функциональном языке): (my-app.users/reset-passworduser) Здесь вызываюется функция reset-password из неймспейса my-app.</description></item><item><title>Чистые и эффективные функции: Эффекты</title><link>https://azhidkov.pro/posts/21/01/210119-effects/</link><pubDate>Tue, 19 Jan 2021 09:19:22 +0700</pubDate><guid>https://azhidkov.pro/posts/21/01/210119-effects/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Начало темы здесь и здесь.
Сегодня расскажу о том, что я понимаю под эффектами и обработкой сигналов.
Что я понимаю под эффектами и сигналамиОбработка сигнала - акт чтения глобальной изменяемой памяти.
Отправка сигнала - акт записи глобальной изменяемой памяти.
Глобальная изменяемая память - область памяти, на которую в момент чтения/записи замаплено изменяемое поле объекта или структуры, достижимого из GC root.</description></item><item><title>Чистые и грязные функции, эффекты и обработка сигналов, сайдэффекты: чистые функции</title><link>https://azhidkov.pro/posts/21/01/210112-pure-functions/</link><pubDate>Tue, 12 Jan 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/01/210112-pure-functions/</guid><description>Note: Следить за обновлениями блога можно в моём канале: Эргономичный код
Начало темы здесь
Обращаю ваше внимание, что топик расширился - помимо анонсированных вчера грязных функций, вчера же я ещё &amp;#34;открыл&amp;#34; сигналы. Заголовок конечно длинноват, но пока так:) Но обо всём по порядку и сегодня у нас чистые функции.
Чистая функция - это функция без эффектов и сайдэффектов:) Или функция в математическом смысле - её результат определяется исключительно параметрами и у неё только один результат - возвращаемое значение.</description></item><item><title>Single Responsibility Principle considered harmful</title><link>https://azhidkov.pro/posts/21/01/210107-srp/</link><pubDate>Thu, 07 Jan 2021 07:25:37 +0700</pubDate><guid>https://azhidkov.pro/posts/21/01/210107-srp/</guid><description>Наткнулся тут на эту статью и чёт меня малёха бомбануло.
Теоретически, принцип (Single Responsibility Principle ) возможно хороший и правильный, ток с ним есть одна проблема - анкл Боб 20 (двадцать) лет его объясняет и ни как объяснить не может.
Мне удалось отследить следующую историю формулировок этого принципа самим Мартином:
2003: &amp;#34;A class should have only one reason to change&amp;#34; - Agile Software Development, Principles, Patterns, and Practices2008: &amp;#34;The Single Responsibility Principle (SRP) states that a class or module should have one, and only one, reason to change&amp;#34; - Clean Code2014: &amp;#34;Gather together the things that change for the same reasons.</description></item><item><title>Чистые и эффективные функции: Введение</title><link>https://azhidkov.pro/posts/21/01/210105-pure-functions-and-effects-intro/</link><pubDate>Tue, 05 Jan 2021 09:19:22 +0700</pubDate><guid>https://azhidkov.pro/posts/21/01/210105-pure-functions-and-effects-intro/</guid><description>В этом блоге и своей книге я постоянно повторяю мантру о &amp;#34;разделении эффектов и логики&amp;#34; и поэтому мне необходимо, чтобы читатели однозначно меня понимали. Однако когда я начал разбирать существующую терминологию, с удивлением обнаружил, что общепринятой вообще нет, а те варианты что есть не отражают важных мне нюансов. Поэтому я решил написать цикл статей об используемой мной терминологии.
С чистыми функциями всё более-менее просто, у них на вики есть внятное определение:</description></item><item><title/><link>https://azhidkov.pro/effects-diagram/specification-base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azhidkov.pro/effects-diagram/specification-base/</guid><description>История измененийv0.2.0Изменение нотации: обращено направление стрелок, обозначающих эффекты чтения - теперь они идут от операций к ресурсам. v0.1.0Изменение концептуальной модели: эффекты косвенного вызова заменены на события.Улучшена стилистика и точность формулировок.Удалено &amp;#34;Приложение 3. Философия эффекта&amp;#34;. v0.0.2Изменение условного обозначения событий: отказ от представления отдельными блоками в пользу стрелок.Переход к использованию визуального языка C4 Model. v0.0.1Опубликована первая версия.
ВведениеДиаграмма эффектов — инструмент для разработчиков, предназначенный для визуализации поведения информационной системы через описание её взаимодействия с внешним миром.</description></item></channel></rss>